void wrong_key(void);
int ask_yes_no(int what_help, NEWWIN *popup);
void color_on(NEWWIN *win, int colorpair_index);
void color_off(NEWWIN *win, int colorpair_index);
void myattr_on(NEWWIN *win, myattr_t attr);
void myattr_off(NEWWIN *win, myattr_t attr);
void ui_inverse_on(NEWWIN *win);
void ui_inverse_off(NEWWIN *win);
void draw_line(NEWWIN *win, linepos_t where);
char * edit_string(NEWWIN *win, int win_y, int win_x, int win_width, int max_width, char numbers_only, char *input_string, int what_help, char first_char, history_t *ph, mybool_t *pcase_insensitive);
NEWWIN * create_popup(int n_lines, int n_colls);
void delete_popup(NEWWIN *mywin);
void mydelwin(NEWWIN *win);
void mydoupdate();
NEWWIN * mynewwin(int nlines, int ncols, int begin_y, int begin_x);
void escape_print(NEWWIN *win, int y, int x, char *str);
void win_header(NEWWIN *win, char *str);
void gui_window_header(char *string);
int find_colorpair(int fgcolor, int bgcolor, char fuzzy);
int find_or_init_colorpair(int fgcolor, int bgcolor, char ignore_errors);
int colorstr_to_nr(char *str);
int attrstr_to_nr(char *str);
myattr_t parse_attributes(char *str);
void set_ncurses_colorpairs(void);
myattr_t find_attr(int fgcolor, int bgcolor, int attrs);
char *color_to_string(int nr);
char *attr_to_str(int attr);
void determine_terminal_size(int *max_y, int *max_x);
char * emulate_terminal(char *string, color_offset_in_line **cmatches, int *n_cmatches);
void get_terminal_type(void);
void init_ncurses(void);
void init_colornames(void);
void draw_border(NEWWIN *mywin);
